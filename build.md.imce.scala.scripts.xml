<?xml version="1.0" encoding="iso-8859-1"?>
<project xmlns:qvto="http://www.eclipse.org/qvt/1.0.0/Operational" name="gov.nasa.jpl.dynamicScripts.magicdraw.scripts" basedir=".">

	<condition property="md.build.tools.dir.exists" value="true">
		<and>
			<isset property="md.build.tools.dir" />
			<available type="dir" file="${md.build.tools.dir}" />
			<available type="file" file="${md.build.tools.dir}/build.md.properties" />
		</and>
	</condition>

	<fail unless="md.build.tools.dir.exists" />

	<loadproperties srcfile="${md.build.tools.dir}/build.md.properties" />

	<condition property="all.precondition.scala" value="true">
		<and>
			<isset property="all.precondition.md" />
			<isset property="scala.dir" />
			<available type="dir" file="${scala.dir}" />
		</and>
	</condition>

	<condition property="scala.compile.mode.scalac">
		<or>
			<not>
				<isset property="build.jar.mode" />
			</not>
			<and>
				<isset property="build.jar.mode" />
				<equals arg1="${build.jar.mode}" arg2="jar" />
			</and>
		</or>
	</condition>

	<condition property="scala.compile.mode.odasa">
		<and>
			<isset property="build.jar.mode" />
			<equals arg1="${build.jar.mode}" arg2="odasa" />
		</and>
	</condition>

	<condition property="scala.compile.mode.error">
		<and>
			<isset property="build.jar.mode" />
			<not>
				<equals arg1="${build.jar.mode}" arg2="jar" />
			</not>
			<not>
				<equals arg1="${build.jar.mode}" arg2="odasa" />
			</not>
		</and>
	</condition>

	<!-- Scala support -->

	<path id="scala.classpath">
		<fileset dir="${scala.dir}/lib">
			<include name="*.jar" />
		</fileset>
		<fileset dir="./lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- Define scala compiler, scaladoc, etc command -->
	<taskdef resource="scala/tools/ant/antlib.xml">
		<classpath refid="scala.classpath" />
	</taskdef>

	<target name="build" depends="build.odasa,build.scalac,build.error" />

	<target name="build.error" if="scala.compile.mode.error">
		<fail message="Property 'scalac.mode' should be set either to: 'jar' or 'odasa'" />
	</target>

	<target name="classpath2fileset">
		<copy file="./.classpath" toFile="./.classpath.libs" verbose="true" overwrite="true">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="&lt;classpathentry.* kind=&quot;lib&quot; path=&quot;.*\.jar&quot;.*&gt;" />
				</linecontainsregexp>
			</filterchain>
		</copy>
		<replaceregexp byline="true" file="./.classpath.libs">
			<regexp pattern="[ \t]*&lt;classpathentry.* kind=&quot;lib&quot; path=&quot;(.*\.jar)&quot;.*&gt;" />
			<substitution expression=",\1" />
		</replaceregexp>

		<copy file="./.classpath" toFile="./.classpath.md" verbose="true" overwrite="true">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="&lt;classpathentry.* path=&quot;gov\.nasa\.jpl\.magicdraw\.CLASSPATH_LIB_CONTAINER.*&quot;\/&gt;" />
				</linecontainsregexp>
			</filterchain>
		</copy>
		<replaceregexp byline="true" file="./.classpath.md">
			<regexp pattern=".*&lt;classpathentry.* path=&quot;gov\.nasa\.jpl\.magicdraw\.CLASSPATH_LIB_CONTAINER/(.*)&quot;\/&gt;" />
			<substitution expression="\1" />
		</replaceregexp>

		<loadfile srcFile="./.classpath.libs" property="classpath.libs.path">
			<filterchain>
				<striplinebreaks />
				<tokenfilter>
					<replaceregex pattern="^," replace="" flags="g" />
				</tokenfilter>
			</filterchain>
		</loadfile>

		<loadfile srcFile="./.classpath.md" property="classpath.md.path">
			<filterchain>
				<striplinebreaks />
				<tokenfilter>
					<replaceregex pattern=",([^,]*[^/])$" replace=",\1/" flags="g" />
					<replaceregex pattern=",([^,]*)/" replace=",\1/*.jar" flags="g" />
					<replaceregex pattern="^," replace="" flags="g" />
				</tokenfilter>
			</filterchain>
		</loadfile>

		<echoproperties prefix="md" />

		<path id="classpath.libs.ref">
			<fileset dir="${scripts.dir}" includes="${classpath.libs.path}" />
		</path>

		<path id="classpath.md.path.ref">
			<fileset dir="${md.install.dir}" includes="${classpath.md.path}" />
		</path>

		<property name="classpath.md.jars" refid="classpath.md.path.ref" />

		<delete file="./.classpath.md" />
		<delete file="./.classpath.libs" />

		<echoproperties prefix="classpath" />
	</target>

	<target name="build.scalac" if="scala.compile.mode.scalac" depends="classpath2fileset">
		<echoproperties prefix="md" />
		<delete file="${scripts.dir}/lib/${scripts.name}.jar" failonerror="false" />
		<mkdir dir="${scripts.dir}/bin" />
		<scalac srcdir="${scripts.dir}/src" destdir="${scripts.dir}/bin" fork="true" target="jvm-1.6" deprecation="no" addparams="-no-specialization" jvmargs="-XX:+UseConcMarkSweepGC">
			<classpath>
				<pathelement path="${java.class.path}" />
				<path refid="classpath.libs.ref" />
				<path refid="classpath.md.path.ref" />
				<path refid="scala.classpath" />
			</classpath>
			<include name="**/*.scala" />
		</scalac>

		<jar destfile="${scripts.dir}/lib/${scripts.name}.jar">
			<fileset dir="${scripts.dir}/bin/">
				<include name="**/*.class" />
				<include name="**/*.properties" />
			</fileset>
		</jar>

		<jar destfile="${scripts.dir}/lib.srcs/${scripts.name}-sources.jar">
			<fileset dir="${scripts.dir}/src/">
				<include name="**/*.java" />
				<include name="**/*.scala" />
				<include name="**/*.properties" />
			</fileset>
		</jar>
	</target>

	<target name="build.odasa" if="scala.compile.mode.odasa">
		<echo message="# odasa addSnapshot --project ${env.ODASA_HOME}/projects/${env.JOB_NAME} --overwrite --default-build --untagged --date ${date} --name ${bundle.name}" />
		<exec executable="${env.ODASA_HOME}/tools/odasa" failifexecutionfails="true" failonerror="true">
			<arg value="addSnapshot" />
			<arg value="--project" />
			<arg value="${env.ODASA_HOME}/projects/${env.JOB_NAME}" />
			<arg value="--overwrite" />
			<arg value="--default-build" />
			<arg value="--untagged" />
			<arg value="--date" />
			<arg value="${date}" />
			<arg value="--name" />
			<arg value="${bundle.name}" />
		</exec>

		<echo message="# odasa buildSnapshot --project ${env.ODASA_HOME}/projects/${env.JOB_NAME} --failEarly --deleteOnError ${bundle.name}" />
		<exec executable="${env.ODASA_HOME}/tools/odasa" failifexecutionfails="true" failonerror="true">
			<arg value="buildSnapshot" />
			<arg value="--project" />
			<arg value="${env.ODASA_HOME}/projects/${env.JOB_NAME}" />
			<arg value="--failEarly" />
			<arg value="--deleteOnError" />
			<arg value="${bundle.name}" />
		</exec>
		<loadfile srcfile="${env.ODASA_HOME}/projects/${env.JOB_NAME}/${bundle.name}/log/build.log" property="odasa.build.errors">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="\[javac\] [1-9][0-9]* errors" />
				</linecontainsregexp>
			</filterchain>
		</loadfile>
		<condition property="odasa.build.failed">
			<and>
				<isset property="odasa.build.errors" />
				<not>
					<equals arg1="${odasa.build.errors}" arg2="" />
				</not>
			</and>
		</condition>
		<fail if="odasa.build.failed" />

		<echo message="# odasa export --project ${env.ODASA_HOME}/projects/${env.JOB_NAME} --output ${scripts.dir}/artifacts/${bundle.name}-odasa.zip ${bundle.name}" />
		<exec executable="${env.ODASA_HOME}/tools/odasa" failifexecutionfails="true" failonerror="true">
			<arg value="export" />
			<arg value="--project" />
			<arg value="${env.ODASA_HOME}/projects/${env.JOB_NAME}" />
			<arg value="--output" />
			<arg value="${scripts.dir}/artifacts/${bundle.name}-odasa.zip" />
			<arg value="${bundle.name}" />
		</exec>

		<condition property="odasa-export-exists" value="true">
			<and>
				<available type="file" file="${scripts.dir}/artifacts/${bundle.name}-odasa.zip" />
			</and>
		</condition>
		<fail unless="odasa-export-exists" />
		<echo message="# odasa deleteSnapshot --project ${env.ODASA_HOME}/projects/${env.JOB_NAME} ${bundle.name}" />
		<exec executable="${env.ODASA_HOME}/tools/odasa" failifexecutionfails="true" failonerror="true">
			<arg value="deleteSnapshot" />
			<arg value="--project" />
			<arg value="${env.ODASA_HOME}/projects/${env.JOB_NAME}" />
			<arg value="${bundle.name}" />
		</exec>
	</target>

	<macrodef name="md.scripts.zip">
		<attribute name="scripts.dir" />
		<attribute name="scripts.name" />
		<attribute name="scripts.resource" />
		<attribute name="scripts.archive" />
		<attribute name="scripts.version" />
		<element name="source-includes" optional="true" />
		<element name="binary-includes" optional="true" />
		<sequential>
			<delete failonerror="false" quiet="true">
				<fileset dir="@{scripts.dir}/root/imce.scripts/@{scripts.name}">
					<include name="*.jar" />
					<include name="lib/**/*.jar" />
					<include name="lib/**/*.dll" />
					<include name="lib/**/*.jnilib" />
					<include name="lib/**/*.so" />
					<include name="*.properties" />
					<include name="*.sh" />
					<include name="*.bat" />
					<include name="*.exe" />
					<include name="*.xml" />
					<source-includes />
					<binary-includes />
				</fileset>
				<fileset dir="@{scripts.dir}/root">
					<include name="modelLibraries/**/*.html" />
					<include name="modelLibraries/**/*.mdzip" />
					<include name="profiles/**/*.mdzip" />
					<include name="samples/**/*.mdzip" />
					<include name="testResources/**/*.mdzip" />
					<include name="testResources/**/*.properties" />
				</fileset>
			</delete>

			<copy todir="@{scripts.dir}/root/imce.scripts/@{scripts.name}" verbose="true" failonerror="false">
				<fileset dir="@{scripts.dir}">
					<include name="*.jar" />
					<include name="lib/**/*.jar" />
					<include name="lib/**/*.dll" />
					<include name="lib/**/*.jnilib" />
					<include name="lib/**/*.so" />
					<include name="*.properties" />
					<include name="*.xml" />
					<source-includes />
					<binary-includes />
				</fileset>
			</copy>
			<chmod perm="ugo+rx" verbose="true" failonerror="true">
				<fileset dir="@{scripts.dir}/root/imce.scripts/@{scripts.name}">
					<include name="*.sh" />
					<include name="*.bat" />
					<include name="*.exe" />
				</fileset>
			</chmod>

			<copy todir="@{scripts.dir}/root/profiles" verbose="true" failonerror="false">
				<fileset refid="scripts.profiles" />
			</copy>

			<copy todir="@{scripts.dir}/root/modelLibraries" verbose="true" failonerror="false">
				<fileset refid="scripts.modelLibraries" />
			</copy>

			<copy todir="@{scripts.dir}/root/samples" verbose="true" failonerror="false">
				<fileset refid="scripts.samples" />
			</copy>

			<copy todir="@{scripts.dir}/testResources" verbose="true" failonerror="false">
				<fileset refid="scripts.tests" />
			</copy>

			<delete failonerror="false" quiet="true" file="@{scripts.dir}/artifacts/MD${MagicDraw.version}-@{scripts.archive}-v@{scripts.version}.zip" />

			<zip destfile="@{scripts.dir}/artifacts/MD${MagicDraw.version}-@{scripts.archive}-v@{scripts.version}.zip">
				<zipfileset dir="@{scripts.dir}/root" dirmode="755">
					<include name="**/*" />
				</zipfileset>
			</zip>

			<zip destfile="@{scripts.dir}/artifacts/MD${MagicDraw.version}-@{scripts.archive}-v@{scripts.version}.zip" update="true">
				<zipfileset dir="@{scripts.dir}/root" dirmode="755" filemode="555">
					<include name="*.sh" />
					<include name="*.bat" />
					<include name="*.exe" />
				</zipfileset>
			</zip>
		</sequential>
	</macrodef>

	<macrodef name="md.install.zip">
		<attribute name="scripts.dir" />
		<attribute name="scripts.archive" />
		<attribute name="scripts.version" />
		<attribute name="install.dir" />
		<sequential>
			<unzip src="@{scripts.dir}/artifacts/MD${MagicDraw.version}-@{scripts.archive}-v@{scripts.version}.zip" dest="@{install.dir}" overwrite="true" />
		</sequential>
	</macrodef>

	<macrodef name="md.test.allPluginsEnabledAndLoaded">
		<attribute name="scripts.dir" />
		<attribute name="install.dir" />
		<sequential>
			<ant dir="@{scripts.dir}" antfile="@{install.dir}/plugins/gov.nasa.jpl.magicdraw.imce/test/testAllPluginsEnabledAndLoaded.xml" target="all" output="@{scripts.dir}/generated/results/testAllPluginsEnabledAndLoaded.log">
				<property name="md.install.dir" value="@{install.dir}" />
				<property name="WGET_BIN" value="${env.WGET_BIN}" />
				<property name="XVFB_BIN" value="${env.XVFB_BIN}" />
			</ant>
		</sequential>
	</macrodef>

	<condition property="isLinux">
		<and>
			<os family="unix" />
			<not>
				<os family="mac" />
			</not>
		</and>
	</condition>

	<condition property="isMac">
		<os family="mac" />
	</condition>

	<target name="md.developer" depends="md.developer=no,md.developer=yes" />

	<target name="md.developer=yes" if="DEVELOPER">
		<echo message="*** developer mode ***" />
		<propertyset id="md.developer.property">
			<propertyref name="DEVELOPER" />
		</propertyset>
	</target>

	<target name="md.developer=no" unless="DEVELOPER">
		<echo message="*** non-developer mode ***" />
		<propertyset id="md.developer.property" />
	</target>

	<condition property="DEBUG" value="true">
		<and>
			<isset property="debug.mode" />
			<istrue value="${debug.mode}" />
		</and>
	</condition>

	<condition property="JDWP.DEBUG" value="-agentlib:jdwp=transport=dt_socket,server=y,address=8000" else="-Dno.debug">
		<and>
			<isset property="DEBUG" />
			<istrue value="${DEBUG}" />
		</and>
	</condition>

	<condition property="DEVELOPER" value="true">
		<and>
			<isset property="developer.mode" />
			<istrue value="${developer.mode}" />
		</and>
	</condition>

	<target name="md.mode" depends="md.debug,md.run" />

	<target name="md.debug" if="DEBUG">
		<echo message="*** Run MD in JDWP debug listen mode (port=8000) ***" />
	</target>

	<target name="md.run" unless="DEBUG">
		<echo message="*** Run MD normally (no JDWP debugging) ***" />
	</target>

	<fileset id="magicdraw.classpath" dir="${md.install.dir}">
		<include name="lib/**/*.jar" />
	</fileset>

</project>